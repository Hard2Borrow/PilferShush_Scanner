/* Notes */

-- todo version 2 2018

- ultra/synth.js make mod transmitter have a carrier freq and logic 1, logic 0 (include in repo)

- replace/augment current stepFreq scan model with one that grabs any candidate above threshold (ie. 32ms binmods )

- add a high pass filter with gate for the recordTask (only trigger magnitudeRecordScan when over threshold)

- bufferScan functions? remove or optimise if possible (max size to scan?)

- proper on pause/resume

- dialogs make pretty

-- maybe::
- bt beacon scanner
- background service for scanner.
- make usb audio work (fails on test dev device due to hardware MIC failure: new daughter board required)

/*****************/

FOR JAMMER

boldbeast et al : ability to use NDK calls to intercept the mic hardware and re-route
source:  media/libmedia/AudioSystem.cpp

logcat::
- D/audio_hw_primary: in_set_parameters: enter: kvpairs=input_source=1;routing=-2147483644
- D/PermissionCache: checking android.permission.MODIFY_AUDIO_SETTINGS for uid=10286 => granted (432 us)
- D/audio_hw_primary: in_set_parameters: enter: kvpairs=input_source=4;routing=-2147483584;format=1
- D/audio_hw_primary: select_devices: out_snd_device(0: ) in_snd_device(283: voice-dmic-ef)
- D/hardware_info: hw_info_append_hw_type : device_name = voice-dmic-ef
- D/voice: voice_get_incall_rec_snd_device: in_snd_device(283: voice-dmic-ef) incall_record_device(283: voice-dmic-ef)

AudioSystem.cpp::
status_t AudioSystem::setParameters(audio_io_handle_t ioHandle, const String8& keyValuePairs) {
    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
    if (af == 0) return PERMISSION_DENIED;
    return af->setParameters(ioHandle, keyValuePairs);
}

AudioFlinger.cpp::
status_t AudioFlinger::setParameters(audio_io_handle_t ioHandle, const String8& keyValuePairs)
// ioHandle == 0 means the parameters are global to the audio hardware interface
keyRouting: to change audio routing, value is an int in audio_devices_t





----------------------------

- scanner max range of 3000 Hz before cpu hit

- RecordTask reads in short[] only

as of >= android 6.x +, M == Marshmallow, SDK 23 need to reevaluate how to check for beacon SDks.

It seems that the current methods only are useful if an application asks for
permissions as per its manifest at install, then we can check these.

Signal360 app New & Now has the sdk inside it (SignalService.java etc)
is New&Now ouputting audio beacons instead of listening for them - lots of AudioALSA logs...
problem also is that SignalService has BT as well as Audio in its methods...

audio as modulated 1s and modulated 0s, transmit code to server,
receive content from server.
20550~21000 for logic 0
21000~22000 for logic 1

pulse of 1ms, for 32 ms duration == 32 bits
clock pulse (carrier-like) between logic 0 and logic 1 frequency serves as centre freq and start bit

application may wake up OS to listen for modulated code...
can also listen for specific SSIDs of WiFi, to wake up os and listen for mod codes.

example freq range may be increment of 100hz
check for peaks that occuring within 100 hz of each other, ie 20500 has 30 peaks and 20400 has 8 peaks,
this means likely a proper pair of mod codes, as opposed to 20500 and say 20750.. (250hz diff)
"may" set lower freq peaks to logic 0 and higher freq peaks to logic 1 (20400 == 0, 20500 == 1)
preamble, payload and checksum
(use a PIC 10 F200 OT 8 bit micro controller for badges to receive)
    "Microprocessor may be configured to send to speaker a periodic Wave
    such as a square Wave in a first range of frequencies corresponding to a
    logic 0. Microprocessor may be configured to send to speaker a
    square Wave in a second range of frequencies corresponding to a logic 1.
    In this Way, micro processor may thereby frequency modulate code..."

RecordTask.magnitudeScan() needs to be better at picking useful freqs...
any freq captured below the candidate and within 100Hz gets included with it?
20025, 20050, 20075 all == 20100?

debug ie:
11-22 16:06:00.267: D/PilferShush(11662): Freq: 20000 : 16
11-22 16:06:00.267: D/PilferShush(11662): Freq: 19975 : 14
11-22 16:06:00.268: D/PilferShush(11662): Freq: 20075 : 9
11-22 16:06:00.269: D/PilferShush(11662): Freq: 20100 : 7
11-22 16:06:00.269: D/PilferShush(11662): Freq: 20025 : 7
11-22 16:06:00.270: D/PilferShush(11662): Freq: 20125 : 7
11-22 16:06:00.270: D/PilferShush(11662): Freq: 20050 : 5

RecordTask that steps through frequencies is wrong algorithm for this.
we need a 32ms ability.
find a short burst tone (32ms) and then analyse it.

LISNR

18.7-19.2 kHz
LISNR SmartTones are comprised of FSK audio signals varying between frequencies of 18.75 kHz and 19.2kHZ,
-30dB, -25dB, -20dB, -15dB, -10dB, -5dB, -1dB


detect time: 0.6 - 3 sec
start bit, record 10 secs or so using hpf, then look for payload within:
mic->(Lpf)filter->(10sec)buffer->decode/demod

hexArray = "0123456789abcdef".toCharArray(); for hashedPayload

"Peer to Peer"
lisnr as of API 5 now uses phone to broadcast as well...


startBroadcastingTone(Lcom/lisnr/sdk/LisnrTone)
textTone == US-ASCII,
    toneDuration = text.length() * 6 * 40 + 1280;
dataTone = byte.length < 255 && > 1,
    toneDuration = data.length * 6 * 40 + 1280
IDTone = { toneID (long), startingIteration(int), lastIteration(int) }
    toneDuration = ((lastIteration + 1) * 2.72D) * 1000L;

dataContents.type.equals("video" || "web" || "photo" || "notification")

payload = bytesToHex(hashData(paramArrayOfByte))


in Feb 2017 someone on the Unity forums:
"I'm trying to wrap the LISNR sdk ( http://lisnr.com ) into an android plugin for Unity"...

